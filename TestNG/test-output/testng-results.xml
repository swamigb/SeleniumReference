<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="7" passed="6" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-06-09T20:22:52 CEST" name="Suite" finished-at="2020-06-09T20:22:52 CEST" duration-ms="61">
    <groups>
      <group name="smoke">
        <method signature="HelloWorld.Demo1()[pri:0, instance:Default.HelloWorld@b62fe6d]" name="Demo1" class="Default.HelloWorld"/>
        <method signature="HelloWorld2.HiDemo2(java.lang.String, java.lang.String)[pri:0, instance:Default.HelloWorld2@3c153a1]" name="HiDemo2" class="Default.HelloWorld2"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2020-06-09T20:22:52 CEST" name="Test" finished-at="2020-06-09T20:22:52 CEST" duration-ms="61">
      <class name="Default.HelloWorld">
        <test-method is-config="true" signature="Demo()[pri:0, instance:Default.HelloWorld@b62fe6d]" started-at="2020-06-09T20:22:52 CEST" name="Demo" finished-at="2020-06-09T20:22:52 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Demo -->
        <test-method is-config="true" signature="BeforeMethod()[pri:0, instance:Default.HelloWorld@b62fe6d]" started-at="2020-06-09T20:22:52 CEST" name="BeforeMethod" finished-at="2020-06-09T20:22:52 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method signature="Demo1()[pri:0, instance:Default.HelloWorld@b62fe6d]" started-at="2020-06-09T20:22:52 CEST" name="Demo1" finished-at="2020-06-09T20:22:52 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Demo1 -->
        <test-method is-config="true" signature="Demo2()[pri:0, instance:Default.HelloWorld@b62fe6d]" started-at="2020-06-09T20:22:52 CEST" name="Demo2" finished-at="2020-06-09T20:22:52 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Demo2 -->
        <test-method is-config="true" signature="AfterMethod()[pri:0, instance:Default.HelloWorld@b62fe6d]" started-at="2020-06-09T20:22:52 CEST" name="AfterMethod" finished-at="2020-06-09T20:22:52 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
      </class> <!-- Default.HelloWorld -->
      <class name="Default.HelloWorld2">
        <test-method is-config="true" signature="HeyDemo2()[pri:0, instance:Default.HelloWorld2@3c153a1]" started-at="2020-06-09T20:22:52 CEST" name="HeyDemo2" finished-at="2020-06-09T20:22:52 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- HeyDemo2 -->
        <test-method signature="Demo()[pri:0, instance:Default.HelloWorld2@3c153a1]" started-at="2020-06-09T20:22:52 CEST" name="Demo" finished-at="2020-06-09T20:22:52 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Demo -->
        <test-method signature="HiDemo2(java.lang.String, java.lang.String)[pri:0, instance:Default.HelloWorld2@3c153a1]" started-at="2020-06-09T20:22:52 CEST" name="HiDemo2" finished-at="2020-06-09T20:22:52 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Suite level :http://facebook.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ Suite level :hapi]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- HiDemo2 -->
        <test-method signature="newMethod(java.lang.String, java.lang.String)[pri:0, instance:Default.HelloWorld2@3c153a1]" started-at="2020-06-09T20:22:52 CEST" name="newMethod" data-provider="getData" finished-at="2020-06-09T20:22:52 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[First user]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[First pwd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newMethod -->
        <test-method signature="newMethod(java.lang.String, java.lang.String)[pri:0, instance:Default.HelloWorld2@3c153a1]" started-at="2020-06-09T20:22:52 CEST" name="newMethod" data-provider="getData" finished-at="2020-06-09T20:22:52 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[second user]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[second user]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- newMethod -->
        <test-method signature="HelloDemo2(java.lang.String)[pri:0, instance:Default.HelloWorld2@3c153a1]" started-at="2020-06-09T20:22:52 CEST" name="HelloDemo2" finished-at="2020-06-09T20:22:52 CEST" duration-ms="3" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Suite level :hapi]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:968)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at Default.HelloWorld2.HelloDemo2(HelloWorld2.java:32)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:821)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:767)
at org.testng.TestRunner.run(TestRunner.java:588)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1214)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1136)
at org.testng.TestNG.runSuites(TestNG.java:1066)
at org.testng.TestNG.run(TestNG.java:1034)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- HelloDemo2 -->
        <test-method signature="Demo2()[pri:0, instance:Default.HelloWorld2@3c153a1]" started-at="2020-06-09T20:22:52 CEST" name="Demo2" finished-at="2020-06-09T20:22:52 CEST" depends-on-methods="Default.HelloWorld2.HiDemo2" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Demo2 -->
      </class> <!-- Default.HelloWorld2 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
